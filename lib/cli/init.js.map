{"version":3,"sources":["../../src/cli/init.js"],"names":["confirm","project","console","log","prompt","type","name","message","green","default","then","answers","JSON","parse","showWizard","validate","choices","templates","Object","keys","map","templateId","package","description","short","cyan","reset","value","stringify","projectName","source","template"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAMA,IAAMA,UAAU,SAAVA,OAAU,CAACC,OAAD,EAAa;AAC5BC,SAAQC,GAAR,CAAYF,OAAZ;AACAC,SAAQC,GAAR,CAAY,EAAZ;AACA,oBACEC,MADF,CACS,CAAC;AACRC,QAAM,SADE;AAERC,QAAM,SAFE;AAGRC,gBAAY,gBAAMC,KAAN,CAAY,aAAZ,CAHJ;AAIRC,WAAS;AAJD,EAAD,CADT,EAOEC,IAPF,CAOO,UAACC,OAAD,EAAa;AAClB,MAAIA,QAAQX,OAAR,KAAoB,IAAxB,EAA8B;AAC7BE,WAAQC,GAAR,CAAY,EAAZ;AACA,uBAAUS,KAAKC,KAAL,CAAWZ,OAAX,CAAV;AACA;AACD,EAZF;AAaA,CAhBD;;AAkBA,IAAMa,aAAa,SAAbA,UAAa,GAAM;AACxB;AACAZ,SAAQC,GAAR,CAAY,gFAAZ;AACAD,SAAQC,GAAR,CAAY,4DAAZ;AACAD,SAAQC,GAAR,CAAY,EAAZ;AACAD,SAAQC,GAAR,CAAY,+BAAZ;AACAD,SAAQC,GAAR,CAAY,EAAZ;AACA,oBACEC,MADF,CACS,CACP;AACCC,QAAM,OADP;AAECC,QAAM,MAFP;AAGCC,gBAAY,gBAAMC,KAAN,CAAY,kBAAZ,CAHb;AAICC,WAAS,cAJV;AAKCM;AALD,EADO,EAQP;AACCV,QAAM,MADP;AAECC,QAAM,UAFP;AAGCC,gBAAY,gBAAMC,KAAN,CAAY,WAAZ,CAHb;AAICC,oCAJD;AAKCO,WAAS,mBAAM;AACd,OAAIC,YAAY,IAAhB;AACAA,eAAY,iCAAZ;AACA,UAAOC,OAAOC,IAAP,CAAYF,SAAZ,EAAuBG,GAAvB,CAA2B,UAACC,UAAD,EAAgB;AAAA,gCACnBJ,UAAUI,UAAV,EAAsBC,OADH;AAAA,QACzChB,IADyC,yBACzCA,IADyC;AAAA,QACnCiB,WADmC,yBACnCA,WADmC;;AAEjD,QAAMC,QAAQ,gBAAMC,IAAN,CAAWnB,IAAX,CAAd;AACA,WAAO;AACNA,WAASkB,KAAT,SAAkB,gBAAME,KAAN,CAAYH,WAAZ,CADZ;AAENI,YAAON,UAFD;AAGNG;AAHM,KAAP;AAKA,IARM,CAAP;AASA;AAjBF,EARO,CADT,EA6BEd,IA7BF,CA6BO,UAACC,OAAD,EAAa;AAClBT,UAAQC,GAAR,CAAY,EAAZ;AACAH,UAAQY,KAAKgB,SAAL,CAAejB,OAAf,EAAwB,IAAxB,EAA8B,IAA9B,CAAR;AACA,EAhCF;AAiCA,CAxCD;;kBA0Ce,UAACkB,WAAD,EAAcC,MAAd,EAAyB;AACvC,KAAID,eAAe,CAACC,MAApB,EAA4B;AAC3B9B,UAAQY,KAAKgB,SAAL,CAAe,EAAEtB,MAAMuB,WAAR,EAAqBE,mCAArB,EAAf,EAAiE,IAAjE,EAAuE,IAAvE,CAAR;AACA,EAFD,MAEO,IAAIF,eAAeC,MAAnB,EAA2B;AACjC9B,UAAQY,KAAKgB,SAAL,CAAe,EAAEtB,MAAMuB,WAAR,EAAqBE,UAAUD,MAA/B,EAAf,EAAwD,IAAxD,EAA8D,IAA9D,CAAR;AACA,EAFM,MAEA;AACNhB;AACA;AACD,C","file":"init.js","sourcesContent":["import inquirer from 'inquirer';\nimport chalk from 'chalk';\nimport { defaultTemplate } from '../../config/settings.json';\nimport { clearConsole } from '../utilities';\nimport {\n\tgetInstalledTemplates,\n\tisValidAppName,\n\tcreateApp,\n} from '../api';\n\nconst confirm = (project) => {\n\tconsole.log(project);\n\tconsole.log('');\n\tinquirer\n\t\t.prompt([{\n\t\t\ttype: 'confirm',\n\t\t\tname: 'confirm',\n\t\t\tmessage: `${chalk.green('Is this ok?')}`,\n\t\t\tdefault: true,\n\t\t}])\n\t\t.then((answers) => {\n\t\t\tif (answers.confirm === true) {\n\t\t\t\tconsole.log('');\n\t\t\t\tcreateApp(JSON.parse(project));\n\t\t\t}\n\t\t});\n};\n\nconst showWizard = () => {\n\tclearConsole();\n\tconsole.log('This utility will walk you through creating the initial files of your project.');\n\tconsole.log('The name of the project must follow NPM\\'s naming pattern.');\n\tconsole.log('');\n\tconsole.log('Press ^C at any time to quit.');\n\tconsole.log('');\n\tinquirer\n\t\t.prompt([\n\t\t\t{\n\t\t\t\ttype: 'input',\n\t\t\t\tname: 'name',\n\t\t\t\tmessage: `${chalk.green('Project\\'s Name:')}`,\n\t\t\t\tdefault: 'your-project',\n\t\t\t\tvalidate: isValidAppName,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'list',\n\t\t\t\tname: 'template',\n\t\t\t\tmessage: `${chalk.green('Template:')}`,\n\t\t\t\tdefault: defaultTemplate,\n\t\t\t\tchoices: () => {\n\t\t\t\t\tlet templates = null;\n\t\t\t\t\ttemplates = getInstalledTemplates();\n\t\t\t\t\treturn Object.keys(templates).map((templateId) => {\n\t\t\t\t\t\tconst { name, description } = templates[templateId].package;\n\t\t\t\t\t\tconst short = chalk.cyan(name);\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tname: `${short} ${chalk.reset(description)}`,\n\t\t\t\t\t\t\tvalue: templateId,\n\t\t\t\t\t\t\tshort,\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t},\n\t\t])\n\t\t.then((answers) => {\n\t\t\tconsole.log('');\n\t\t\tconfirm(JSON.stringify(answers, null, '  '));\n\t\t});\n};\n\nexport default (projectName, source) => {\n\tif (projectName && !source) {\n\t\tconfirm(JSON.stringify({ name: projectName, template: defaultTemplate }, null, '  '));\n\t} else if (projectName && source) {\n\t\tconfirm(JSON.stringify({ name: projectName, template: source }, null, '  '));\n\t} else {\n\t\tshowWizard();\n\t}\n};\n"]}