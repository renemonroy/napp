{"version":3,"sources":["../../src/cli/run.js"],"names":["isFirstCompile","getDefaultConfig","port","process","env","PORT","protocol","HTTPS","host","HOST","requestPortChange","console","log","yellow","prompt","type","name","message","default","when","answers","changePort","handleCompilerStats","stats","serverConfig","messages","isSuccessful","errors","length","warnings","showInstructions","showDevServerSuccess","showDevServerInstructions","showDevServerErrors","showDevServerWarnings","NODE_ENV","Promise","resolve","then","Object","assign","availablePort","cwd","realServerConfig","catch","e","error","exit"],"mappings":"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","file":"run.js","sourcesContent":["import inquirer from 'inquirer';\nimport chalk from 'chalk';\nimport { log, ensureAvailablePort } from '../utilities';\nimport { runApp } from '../api';\nimport formatWebpackMessages from '../../utils/formatWebpackMessages';\nimport webpackMessages from '../../config/webpackMessages';\n\nlet isFirstCompile = null;\n\nconst getDefaultConfig = port => ({\n\tport: process.env.PORT || port || 3000,\n\tprotocol: process.env.HTTPS === 'true' ? 'https' : 'http',\n\thost: process.env.HOST || 'localhost',\n});\n\nconst requestPortChange = (port) => {\n\tconsole.log(chalk.yellow(`Something is already running at port ${port}.`));\n\treturn inquirer.prompt([\n\t\t{\n\t\t\ttype: 'confirm',\n\t\t\tname: 'changePort',\n\t\t\tmessage: 'Would you like to run the app at another port instead?',\n\t\t\tdefault: true,\n\t\t},\n\t\t{\n\t\t\ttype: 'input',\n\t\t\tname: 'port',\n\t\t\tmessage: 'What port?',\n\t\t\twhen: answers => answers.changePort,\n\t\t},\n\t]);\n};\n\nconst handleCompilerStats = (stats, serverConfig) => {\n\tconst messages = formatWebpackMessages(stats);\n\tconst isSuccessful = !messages.errors.length && !messages.warnings.length;\n\tconst showInstructions = isSuccessful && isFirstCompile;\n\tconsole.log('');\n\tif (isSuccessful) {\n\t\twebpackMessages.showDevServerSuccess();\n\t}\n\tif (showInstructions) {\n\t\twebpackMessages.showDevServerInstructions(serverConfig);\n\t\tisFirstCompile = false;\n\t}\n\tif (messages.errors.length) {\n\t\twebpackMessages.showDevServerErrors(messages);\n\t\treturn;\n\t}\n\tif (messages.warnings.length) {\n\t\twebpackMessages.showDevServerWarnings(messages);\n\t}\n};\n\nexport default ({ env, port }) => {\n\tif (env === 'dev' || env === 'development') {\n\t\tprocess.env.NODE_ENV = 'development';\n\t} else if (env === 'prod' || env === 'production') {\n\t\tprocess.env.NODE_ENV = 'production';\n\t} else {\n\t\tprocess.env.NODE_ENV = env;\n\t}\n\tisFirstCompile = true;\n\tconst serverConfig = getDefaultConfig(port);\n\tconsole.log('');\n\tPromise.resolve()\n\t\t.then(() => ensureAvailablePort(serverConfig.port, requestPortChange))\n\t\t.then(availablePort => (Object.assign({}, serverConfig, { port: availablePort })))\n\t\t.then(realServerConfig => runApp(env, process.cwd(), realServerConfig, handleCompilerStats))\n\t\t.catch((e) => {\n\t\t\tlog.error(e);\n\t\t\tprocess.exit(1);\n\t\t});\n};\n"]}