{"version":3,"sources":["../src/utilities.js"],"names":["log","error","msg","hint","console","red","length","blue","printErrors","summary","errors","forEach","err","message","clearConsole","process","stdout","write","platform","openFile","fileRoot","command","ensureAvailablePort","portToTest","prompter","Promise","resolve","reject","detectAvailablePort","ptt","then","port","changePort","newPort","parseInt","removeFileNameHash","fileName","replace","build","match","p1","p2","p3"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAEO,IAAMA,oBAAM;AAClBC,MADkB,iBACZC,GADY,EACM;AAAA,MAAbC,IAAa,uEAAN,IAAM;;AACvBC,UAAQJ,GAAR,CAAe,gBAAMK,GAAN,CAAU,IAAV,CAAf,SAAkCH,GAAlC;AACA,MAAIC,QAAQA,KAAKG,MAAL,GAAc,CAA1B,EAA6B;AAC5BF,WAAQJ,GAAR,CAAe,gBAAMO,IAAN,CAAW,GAAX,CAAf,UAAmCJ,IAAnC;AACA;AACD;AANiB,CAAZ;;AASA,IAAMK,oCAAc,SAAdA,WAAc,CAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CV,KAAIC,KAAJ,CAAUQ,OAAV;AACAC,QAAOC,OAAP,CAAe,UAACC,GAAD,EAAS;AACvBR,UAAQJ,GAAR,CAAYY,IAAIC,OAAJ,IAAeD,GAA3B;AACA,EAFD;AAGA,CALM;;AAOA,IAAME,sCAAe,SAAfA,YAAe,GAAM;AACjCC,SAAQC,MAAR,CAAeC,KAAf,CACCF,QAAQG,QAAR,KAAqB,OAArB,GAA+B,OAA/B,GAAyC,sBAD1C;AAGA,CAJM;;AAMA,IAAMC,8BAAW,SAAXA,QAAW,CAACC,QAAD,EAAc;AACrC,KAAIC,UAAU,EAAd;AACA,SAAQN,QAAQG,QAAhB;AACA,OAAK,QAAL;AACCG,aAAU,MAAV;AACA;AACD,OAAK,OAAL;AACA,OAAK,OAAL;AACCA,aAAU,OAAV;AACA;AACD;AACCA,aAAU,UAAV;AACA;AAVD;AAYA,0BAAQA,OAAR,SAAmBD,QAAnB;AACA,CAfM;;AAiBA,IAAME,oDAAsB,SAAtBA,mBAAsB,CAACC,UAAD,EAAaC,QAAb;AAAA,QAClC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAChC,MAAMC,sBAAsB,SAAtBA,mBAAsB,CAACC,GAAD,EAAS;AACpC,6BAAWA,GAAX,EAAgBC,IAAhB,CAAqB,UAACC,IAAD,EAAU;AAC9B,QAAIA,SAASF,GAAb,EAAkB;AACjBH,aAAQG,GAAR;AACA,KAFD,MAEO;AACNL,cAASK,GAAT,EAAcC,IAAd,CAAmB,gBAAmC;AAAA,UAAhCE,UAAgC,QAAhCA,UAAgC;AAAA,UAAdC,OAAc,QAApBF,IAAoB;;AACrD,UAAI,CAACC,UAAL,EAAiB;AAChBL,cAAO,UAAP;AACA,OAFD,MAEO;AACNC,2BAAoBM,SAASD,OAAT,EAAkB,EAAlB,CAApB;AACA;AACD,MAND;AAOA;AACD,IAZD;AAaA,GAdD;AAeAL,sBAAoBL,UAApB;AACA,EAjBD,CADkC;AAAA,CAA5B;;AAqBA,IAAMY,kDAAqB,SAArBA,kBAAqB;AAAA,QACjCC,SACEC,OADF,CACU,gBAAMC,KADhB,EACuB,EADvB,EAEED,OAFF,CAEU,4BAFV,EAEwC,UAACE,KAAD,EAAQC,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB;AAAA,SAAuBF,KAAKE,EAA5B;AAAA,EAFxC,CADiC;AAAA,CAA3B","file":"utilities.js","sourcesContent":["import chalk from 'chalk';\nimport detectPort from 'detect-port';\nimport { exec } from 'child_process';\nimport paths from '../config/paths';\n\nexport const log = {\n\terror(msg, hint = null) {\n\t\tconsole.log(`${chalk.red('>>')} ${msg}`);\n\t\tif (hint && hint.length > 0) {\n\t\t\tconsole.log(`${chalk.blue('â†³')}  ${hint}`);\n\t\t}\n\t},\n};\n\nexport const printErrors = (summary, errors) => {\n\tlog.error(summary);\n\terrors.forEach((err) => {\n\t\tconsole.log(err.message || err);\n\t});\n};\n\nexport const clearConsole = () => {\n\tprocess.stdout.write(\n\t\tprocess.platform === 'win32' ? '\\x1Bc' : '\\x1B[2J\\x1B[3J\\x1B[H',\n  );\n};\n\nexport const openFile = (fileRoot) => {\n\tlet command = '';\n\tswitch (process.platform) {\n\tcase 'darwin':\n\t\tcommand = 'open';\n\t\tbreak;\n\tcase 'win32':\n\tcase 'win64':\n\t\tcommand = 'start';\n\t\tbreak;\n\tdefault:\n\t\tcommand = 'xdg-open';\n\t\tbreak;\n\t}\n\texec(`${command} ${fileRoot}`);\n};\n\nexport const ensureAvailablePort = (portToTest, prompter) => (\n\tnew Promise((resolve, reject) => {\n\t\tconst detectAvailablePort = (ptt) => {\n\t\t\tdetectPort(ptt).then((port) => {\n\t\t\t\tif (port === ptt) {\n\t\t\t\t\tresolve(ptt);\n\t\t\t\t} else {\n\t\t\t\t\tprompter(ptt).then(({ changePort, port: newPort }) => {\n\t\t\t\t\t\tif (!changePort) {\n\t\t\t\t\t\t\treject('Aborted.');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdetectAvailablePort(parseInt(newPort, 10));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tdetectAvailablePort(portToTest);\n\t})\n);\n\nexport const removeFileNameHash = fileName => (\n\tfileName\n\t\t.replace(paths.build, '')\n\t\t.replace(/\\/?(.*)(\\.\\w+)(\\.js|\\.css)/, (match, p1, p2, p3) => p1 + p3)\n);\n"]}